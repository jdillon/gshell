/*
 * Copyright (C) 2009 the original author(s).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    STATIC = false;
    UNICODE_INPUT = true;
    ERROR_REPORTING = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_DATA_TYPE = "Object";
    VISITOR_RETURN_TYPE = "Object";
    VISITOR_EXCEPTION = "";
    NODE_DEFAULT_VOID = true;
}

///////////////////////////////////////////////////////////////////////////////

PARSER_BEGIN(Parser)
/*
 * Copyright (C) 2009 the original author(s).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.planet57.gshell.parser.impl;

import java.io.Reader;
import java.io.StringReader;

/**
 * Support for command line parsing.
 *
 * @author <a href="mailto:jason@planet57.com">Jason Dillon</a>
 * @since 2.0
 */
public class Parser
{
    public Parser() {
        this(new StringReader(""));
    }

    public ASTCommandLine parse(final Reader reader) throws ParseException {
        assert reader != null;
        ReInit(reader);
        return commandLine();
    }
}

PARSER_END(Parser)

///////////////////////////////////////////////////////////////////////////////

<DEFAULT> TOKEN : // White Space
{
    < WHITESPACE: ( " " | "\t" | "\n" | "\r" | "\f" ) >
}

<DEFAULT> SPECIAL_TOKEN : // Comments
{
    < COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

/*
<DEFAULT>TOKEN :
{
    < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
    < #LETTER: [ "a"-"z", "A"-"Z", "_", "$" ] >
|
    < #DIGIT: [ "0"-"9"] >
}

<DEFAULT> TOKEN :
{
    <STRING_LITERAL :
        ("\"" ( ~["\"","\n","\r"] )* "\"" )
     |
        ("\'" ( ~["\'","\n","\r"] )* "\'" )
    >
}

<DEFAULT> TOKEN : // LITERALS
{
    < INTEGER_LITERAL: (<DIGIT>)+ >
|
    < FLOAT_LITERAL: (<DIGIT>)+ "."(<DIGIT>)+ >
}
*/

<DEFAULT> TOKEN : // Strings
{
    < STRING:
      (   (~["\"","\\"," ","\t","\n","\r","\f",";","|","\"","'"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\"",";"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | "\\"
      )+
    >
|
    < OPAQUE_STRING:
      "'"
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | "\\"
      )*
      "'"
    >
|
    < QUOTED_STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | "\\"
      )*
      "\""
    >
}

///////////////////////////////////////////////////////////////////////////////

ASTCommandLine commandLine() #CommandLine: {}
{
    ( expression() ( ";" [ expression() ] )* | <EOF> )
    {
        return jjtThis;
    }
}

void expression() #Expression: {}
{
    ( argument() | whitespace() )+
}

void whitespace() #Whitespace: {}
{
    <WHITESPACE>
}

void argument() #void: {}
{
    quotedArgument() | opaqueArgument() | plainArgument()
}

void quotedArgument() #QuotedArgument:
{
    Token t;
}
{
    t=<QUOTED_STRING>
    {
        jjtThis.setValue(t.image);
    }
}

void opaqueArgument() #OpaqueArgument:
{
    Token t;
}
{
    t=<OPAQUE_STRING>
    {
        jjtThis.setValue(t.image);
    }
}

void plainArgument() #PlainArgument:
{
    Token t;
}
{
    t=<STRING>
    {
        jjtThis.setValue(t.image);
    }
}

